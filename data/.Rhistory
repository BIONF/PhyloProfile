taxaList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T))
#rankSelect = input$rankSelect
rankSelect = "05_strain"
rankName = substr(rankSelect,4,nchar(rankSelect))
input$inSelect = "Acinetobacter baumannii"
if(rankName == "strain"){
rankName = "norank"
}
inSelect <- as.numeric(taxaList$ncbiID[taxaList$fullName == input$inSelect & taxaList$rank == rankName])
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
taxaList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T))
#rankSelect = input$rankSelect
rankSelect = "05_strain"
rankName = substr(rankSelect,4,nchar(rankSelect))
name = "Acinetobacter baumannii"
if(rankName == "strain"){
rankName = "norank"
}
inSelect <- as.numeric(taxaList$ncbiID[taxaList$fullName == name & taxaList$rank == rankName])
head(taxaList)
inSelect
taxaList$ncbiID
taxaList$ncbiID[taxaList$fullName == name]
head(taxaList)
taxaList <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(taxaList)
taxaList[,"strain"]
taxaList$strain
inSelect <- as.numeric(taxaList$ncbiID[taxaList$fullName == name)
inSelect <- as.numeric(taxaList$ncbiID[taxaList$fullName == name])
inSelect
runApp()
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
taxaList <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
#rankSelect = input$rankSelect
rankSelect = "05_genus"
rankName = substr(rankSelect,4,nchar(rankSelect))
name = "Acinetobacter"
if(rankName == "strain"){
rankName = "norank"
}
inSelect <- as.numeric(taxaList$ncbiID[taxaList$fullName == name])
head(taxaList)
inSelect
name
taxaList$fullName
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
taxaList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T))
#rankSelect = input$rankSelect
rankSelect = "05_strain"
rankName = substr(rankSelect,4,nchar(rankSelect))
name = "Acinetobacter baumannii"
if(rankName == "strain"){
rankName = "norank"
}
head(taxaList)
taxaList$ncbiID[taxaList$fullName == name]
runApp()
runApp()
runApp()
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest/data/")
Dt <- as.data.frame(read.table("taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
ncol(Dt)
tDt <- as.data.frame(t(Dt))
mod_tDt <- tDt[!duplicated(tDt), ]
tmod_tDt <- t(mod_tDt)
ncol(tmod_tDt)
head(tmod_tDt)
str(tmod_tDt)
tmod_tDt <- as.data.frame(t(mod_tDt))
head(tmod_tDt)
ncol(tmod_tDt)
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(gridExtra)
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
### load list of unsorted taxa
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
Dt_bkp <- Dt
tDt <- as.data.frame(t(Dt))
mod_tDt <- tDt[!duplicated(tDt), ]
Dt <- as.data.frame(t(mod_tDt))
### load list of taxon name
nameList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T,fill = TRUE))
nameList$fullName <- as.character(nameList$fullName)
### input parameters
#rankSelect = input$rankSelect
#rankSelect = "26_phylum" # "06_species"
rankSelect = "06_species"
rankName = substr(rankSelect,4,nchar(rankSelect))   # get rank name from rankSelect
#rankNr = 0 + as.numeric(substr(rankSelect,1,2))     # get rank number (number of column in unsorted taxa list - dataframe Dt)
# get selected supertaxon ID
taxaList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T))
#superID <- as.integer(taxaList$ncbiID[taxaList$fullName == input$inSelect])
#superID = "6029"
superID = "3702"
sortedDt <- data.frame()
firstLine <- Dt[Dt[,rankName]==superID,][1,]  # get all taxo info for 1 representative
firstLine$species
sortedDt <- rbind(sortedDt,firstLine) # add to sortedDt
Dt <- anti_join(Dt, firstLine, by="ncbiID") # & then remove that line from Dt
for(i in 5:ncol(Dt)){
Dt <- Dt[order(Dt[,i]),]
matchID <- sortedDt[,i][1]
subDt <- Dt[Dt[,i]==matchID,]
if(nrow(subDt) > 0){
sortedDt <- rbind(sortedDt,subDt)
Dt <- anti_join(Dt, subDt, by="ncbiID")   # delete already selected lines from Dt dataframe
}
}
head(sortedDt)
nrow(sortedDt)
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(gridExtra)
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
### load list of unsorted taxa
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
Dt_bkp <- Dt
tDt <- as.data.frame(t(Dt))
mod_tDt <- tDt[!duplicated(tDt), ]
Dt <- as.data.frame(t(mod_tDt))
head(Dt)
nameList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T,fill = TRUE))
nameList$fullName <- as.character(nameList$fullName)
rankSelect = "06_species"
rankName = substr(rankSelect,4,nchar(rankSelect))   # get rank name from rankSelect
#rankNr = 0 + as.numeric(substr(rankSelect,1,2))     # get rank number (number of column in unsorted taxa list - dataframe Dt)
# get selected supertaxon ID
taxaList <- as.data.frame(read.table("data/taxonNamesReduced.txt", sep='\t',header=T))
#superID <- as.integer(taxaList$ncbiID[taxaList$fullName == input$inSelect])
#superID = "6029"
superID = "3702"
sortedDt <- data.frame()
firstLine <- Dt[Dt[,rankName]==superID,][1,]  # get all taxo info for 1 representative
sortedDt <- rbind(sortedDt,firstLine) # add to sortedDt
Dt <- anti_join(Dt, firstLine, by="ncbiID") # & then remove that line from Dt
for(i in 5:ncol(Dt)){
Dt <- Dt[order(Dt[,i]),]
matchID <- sortedDt[,i][1]
subDt <- Dt[Dt[,i]==matchID,]
if(nrow(subDt) > 0){
sortedDt <- rbind(sortedDt,subDt)
Dt <- anti_join(Dt, subDt, by="ncbiID")   # delete already selected lines from Dt dataframe
}
}
head(sortedDt)
sortedDt <- data.frame()
firstLine <- Dt[Dt[,rankName]==superID,][1,]  # get all taxo info for 1 representative
firstLine
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
tDt <- as.data.frame(t(Dt))
tDt[duplicated(tDt), ]
head(tDt[duplicated(tDt), ])
mod_tDt <- tDt[!duplicated(tDt) && colnames(tDt) != "species", ]
Dt <- as.data.frame(t(mod_tDt))
head(Dt)
ncol(Dt)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
ncol(Dt)
tDt <- as.data.frame(t(Dt))
head(tDt)
head(tDt[,0])
head(tDt[0])
head(tDt[0,])
head(tDt[,1])
head(tDt[,2])
head(tDt)
head(tDt[duplicated(tDt), ])
dupDt <- (tDt[duplicated(tDt), ])
str(dupDt)
dupDt[1]
dupDt[0]
dupDt[2]
nrow(dupDt)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
?t
?rownames
?rownames()
?rowname
?rowname()
?rownames()
?rownames
rownames <- (dupDt)
rownames
rownames(dupDt)
dupDt[row.names(dupDt) == "strain",]
dupDt[row.names(dupDt) == "norank.*",]
dupDt[row.names(dupDt) == "norank",]
head(dupDt)
dupDt
rownames(dupDt)
dupDt[row.names(dupDt) == "strain" || row.names(dupDt) == "speciesgroup",]
dupDt[row.names(dupDt) == "strain" || row.names(dupDt) == "speciesgroup",]
dupDt[row.names(dupDt) == "strain",]# || row.names(dupDt) == "speciesgroup",]
dupDt[row.names(dupDt) == "strain" & row.names(dupDt) == "speciesgroup",]
dupDt[row.names(dupDt) == "strain" | row.names(dupDt) == "speciesgroup",]
dupDt[row.names(dupDt) == "strain" | row.names(dupDt) == "species" | row.names(dupDt) == "genus",]
dupDt[row.names(dupDt) == "strain" | row.names(dupDt) == "subspecies" | row.names(dupDt) == "genus",]
dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "subspecies" & row.names(dupDt) != "genus",]
dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
tDupDt <- as.data.frame(t(dupDt))
head(tDupDt)
mod_tDt <- tDt[!duplicated(tDt), ]
Dt <- as.data.frame(t(mod_tDt))
head(Dt)
nrow(tDupDt)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
ncol(Dt)
Dt_bkp <- Dt
tDt <- as.data.frame(t(Dt))
dupDt <- (tDt[duplicated(tDt), ])
ncol(dupDt)
dupDt <- tDt[duplicated(tDt), ]
ncol(dupDt)
mod_tDt <- tDt[!duplicated(tDt), ]
nrow(dupDt)
dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
nrow(dupDt_mod)
nrow(dupDt)
nrow(dupDt_mod)
tDupDt <- as.data.frame(t(dupDt_mod))
ncol(tDupDt)
head(tDupDt)
head(dupDt_mod)
head(dupDt)
rownames(dupDt)
head(tDt)
runApp()
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(gridExtra)
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
### load list of unsorted taxa
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
ncol(Dt)
Dt_bkp <- Dt
tDt <- as.data.frame(t(Dt))
head(tDt)
ncol(dupDt)
nrow(dupDt)
ncol(Dt)
head(dupDt)
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
head(dupDt_mod)
# exclude "main" ranks from dupDt
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
nrow(dupDt_mod)
nrow(dupDt)
tDupDt <- as.data.frame(t(dupDt_mod))
ncol(tDupDt)
head(tDupDt)
head(Dt)
nrow(tDupDt)
nrow(Dt)
head(tDupDt)
ncol(tDupDt)
ncol(Dt)
colnames(tDupDt)
newDt <- subset(Dt, select = -dupList )
dupList <- colnames(tDupDt)
newDt <- subset(Dt, select = -dupList )
newDt <- subset(Dt, select = -colnames(tDupDt) )
newDt <- subset(Dt, select = - colnames(tDupDt) )
newDt <- subset(Dt, select = -as.list(colnames(tDupDt)) )
drop <- colnames(tDupDt)
newDt <- Dt[,!(names(Dt) %in% drop)]
ncol(newDt)
ncol(tDupDt)
ncol(Dt)
head(newDt)
Dt <- as.data.frame(read.table("data/testDup.txt", sep='\t',header=T))
Dt <- as.data.frame(read.table("data/testDup.txt", sep='\t',header=T))
Dt
tDt <- as.data.frame(t(Dt))
tDt
dupDt <- tDt[duplicated(tDt), ]
dupDt
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
### load list of unsorted taxa
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
head(Dt)
nrow(Dt)
ncol(Dt)
Dt_bkp <- Dt
tDt <- as.data.frame(t(Dt))
head(tDt)
dupDt <- tDt[duplicated(tDt), ]   # get duplicate rows (columns in original matrix)
rownames(dupDt)
# exclude "main" ranks from dupDt
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
nrow(dupDt_mod)
head(dupDt_mod)
tDupDt <- as.data.frame(t(dupDt_mod))
ncol(tDupDt)
nrow(tDupDt)
head(tDupDt)
drop <- colnames(tDupDt)
newDt <- Dt[,!(names(Dt) %in% drop)]
ncol(newDt)
head(newDt)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
### reduce the number of columns in the iriginal data frame by removing duplicate columns
# transpose orig dataframe
tDt <- as.data.frame(t(Dt))
# get duplicate rows (columns in original matrix)
dupDt <- tDt[duplicated(tDt), ]
# exclude "main" ranks from dupDt
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
# transpose again
tDupDt <- as.data.frame(t(dupDt_mod))
# list of columns need to be dropped
drop <- colnames(tDupDt)
# drop those columns from original Df
Dt <- Dt[,!(names(Dt) %in% drop)]
ncol(Dt)
head(Dt)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
ncol(Dt)
tDt <- as.data.frame(t(Dt))
dupDt <- tDt[duplicated(tDt), ]
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
tDupDt <- as.data.frame(t(dupDt_mod))
ncol(tDupDt)
ncol(dupDt)
row.names(dupDt)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
### reduce the number of columns in the iriginal data frame by removing duplicate columns
# transpose orig dataframe
tDt <- as.data.frame(t(Dt))
# get duplicate rows (columns in original matrix)
dupDt <- tDt[duplicated(tDt), ]
ncol(dupDt)
row.names(dupDt)
ncol(dupDt)
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
ncol(dupDt_mod)
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
### reduce the number of columns in the iriginal data frame by removing duplicate columns
# transpose orig dataframe
tDt <- as.data.frame(t(Dt))
# get duplicate rows (columns in original matrix)
dupDt <- tDt[duplicated(tDt), ]
ncol(dupDt)
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
ncol(dupDt_mod)
row.names(dupDt_mod)
nrow(dupDt)
nrow(dupDt_mod)
tDupDt <- as.data.frame(t(dupDt_mod))
ncol(tDupDt)
ncol(Dt)
drop <- colnames(tDupDt)
drop
nchar(drop)
length(drop)
ncol(tDupDt)
ncol(Dt)
Dt <- Dt[,!(names(Dt) %in% drop)]
ncol(Dt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(reshape)
library(plyr)
library(dplyr)
library(scales)
library(grid)
library(gridExtra)
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest")
### load list of unsorted taxa
Dt <- as.data.frame(read.table("data/taxonID.list.fullRankID", sep='\t',header=T))
### reduce the number of columns in the iriginal data frame by removing duplicate columns
# transpose orig dataframe
tDt <- as.data.frame(t(Dt))
# get duplicate rows (columns in original matrix)
dupDt <- tDt[duplicated(tDt), ]
nrow(dupDt)
row.names(dupDt)
# exclude "main" ranks from dupDt
dupDt_mod <- dupDt[row.names(dupDt) != "strain" & row.names(dupDt) != "species"
& row.names(dupDt) != "genus" & row.names(dupDt) != "family"
& row.names(dupDt) != "order" & row.names(dupDt) != "class"
& row.names(dupDt) != "phylum" & row.names(dupDt) != "kingdom"
& row.names(dupDt) != "superkingdom",]
nrow(dupDt_mod)
row.names(dupDt_mod)
# transpose again
tDupDt <- as.data.frame(t(dupDt_mod))
ncol(tDupDt)
# list of columns need to be dropped
drop <- colnames(tDupDt)
length(drop)
# drop those columns from original Df
Dt <- Dt[,!(names(Dt) %in% drop)]
ncol(Dt)
head(Dt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/Users/trvinh/Desktop/WORK/shiny/phyloprofile_shiny/latest/data/")
data <- paste0("a","b","c",sep='\t')
data
data <- paste("a","b","c",sep='\t')
data
data <- paste("a","b","c",sep="\t")
data
paste(month.abb, nth, sep = ": ", collapse = "; ")
data <- paste("a","b","c",collapse="\t")
data
data <- c("a","b","c")
data
write.table(data,"test.txt",sep="\t",row.names=FALSE)
data <- data.frame("a"=numeric(),"b"=character(),stringsAsFactors=FALSE)
data
data[1,] <- c(10002,"a")
data
data[2,] <- c(10003,"b")
data
write.table(data,"test.txt",sep="\n",row.names=FALSE)
write.table(data,"test.txt",eol="\n",row.names=FALSE)
write.table(data,"test.txt",eol="\n",row.names=FALSE,quote = FALSE)
data <- data.frame("ncbiID"=numeric(),"fullName"=character(),"rank"=character(),"parentID"=numeric(),stringsAsFactors=FALSE)
data[1,] <- c(10002,"a","norank",10001)
data[2,] <- c(10003,"b","norank",10001)
data
write.table(data,"newTaxa.txt",eol="\n",row.names=FALSE,quote = FALSE)
data <- data.frame("ncbiID"=numeric(),"fullName"=character(),"rank"=character(),"parentID"=numeric(),stringsAsFactors=FALSE)
data[1,] <- c(10002,"a","norank",10001)
data[2,] <- c(10003,"b","norank",10001)
data
write.table(data,"newTaxa.txt",sep="\t",eol="\n",row.names=FALSE,quote = FALSE)
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runGist("https://gist.github.com/anonymous/8207166")
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
source('~/Desktop/WORK/shiny/phyloprofile_shiny/r_scripts/confirmPopup.R')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
runApp('~/Desktop/WORK/shiny/phyloprofile_shiny/latest')
